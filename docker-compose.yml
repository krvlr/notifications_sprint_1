version: '3'

volumes:
  notif_postgres_data:
  static_value:
  auth_postgres_data:
  auth_redis_data:
  jaeger_volume:

networks:
  notification_network:
  auth_network:

services:
  notification_db:
    image: postgres:13.0-alpine
    container_name: notification_db
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - notif_postgres_data:/var/lib/postgresql/data/
      - ./dump.sql:/docker-entrypoint-initdb.d/dump.sql
    networks:
      - notification_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5
    expose:
      - "5432"

  api-notification:
    build:
      context: ./notification_api
      dockerfile: Dockerfile
    container_name: api-notification
    restart: always
    depends_on:
      - notification_rabbitmq
    healthcheck:
      test: "curl -H 'X-Request-Id: ${AUTH_HEALTHCHECK_REQUEST_ID}' --fail http://127.0.0.1:8000/api/v1/health || exit 1"
      interval: 10s
      timeout: 10s
      retries: 3
    env_file:
      - .env
    networks:
      - notification_network
    expose:
      - "8000"

  notification-admin:
    build:
      context: ./notification_admin
      dockerfile: Dockerfile
    container_name: notification_admin
    restart: always
    depends_on:
      - notification_db
      - api-notification
    volumes:
      - static_value:/opt/app/static/
    env_file:
      - .env
    networks:
      - notification_network
    expose:
      - "8000"

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: worker-mail
    restart: always
    depends_on:
      - notification_rabbitmq
      - api-notification
    env_file:
      - .env
    networks:
      - notification_network
      - auth_network
    expose:
      - "8000"
    links:
      - 'mailhog'

  notification_rabbitmq:
    image: rabbitmq:3-management
    container_name: notification_rabbitmq
    env_file:
      - .env
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - notification_network
    expose:
      - "5672"

  mailhog:
    image: mailhog/mailhog:latest
    container_name: notification_mailhog
    ports:
      - "8025:8025"
      - "1025:1025"
    env_file:
      - .env
    networks:
      - notification_network
    expose:
      - "1025"

  scheduler:
    build:
      context: ./scheduler
      dockerfile: Dockerfile
    depends_on:
      - notification_db
      - notification-admin
      - api-notification
    networks:
      - notification_network
    env_file:
      - .env
    expose:
      - "8000"

  notification_nginx:
    image: nginx:1.23.1-alpine
    container_name: notification_nginx
    restart: always
    volumes:
      - ./notification_nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./notification_nginx/conf.d:/etc/nginx/conf.d:ro
      - static_value:/static
    depends_on:
      - api-notification
    networks:
      - notification_network
    ports:
      - "80:80"

  db-auth:
    image: postgres:13-alpine
    container_name: db-auth
    restart: always
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME}
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data/
    networks:
      - auth_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $$AUTH_POSTGRES_DB -U $$AUTH_POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5
    expose:
      - "5432"

  redis-auth:
    image: redis:7.0.8-alpine
    container_name: redis-auth
    restart: always
    volumes:
      - auth_redis_data:/data
    networks:
      - auth_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
    expose:
      - "6379"

  api-auth:
    build:
      context: flask_auth
      dockerfile: Dockerfile
    container_name: api-auth
    restart: always
    depends_on:
      db-auth:
        condition: service_healthy
      redis-auth:
        condition: service_healthy
    env_file:
      - .env
    healthcheck:
      test: "curl -H 'X-Request-Id: ${AUTH_HEALTHCHECK_REQUEST_ID}' --fail http://127.0.0.1:8000/api/v1/health || exit 1"
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - auth_network
    expose:
      - "8000"

  jaeger:
    image: jaegertracing/all-in-one:1.20.0
    container_name: jaeger
    restart: always
    volumes:
      - jaeger_volume:/badger
    environment:
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    networks:
      - auth_network
      - notification_network
    ports:
      - "6831:6831/udp"
      - "16686:16686"

  auth-nginx:
    image: nginx:1.23.1-alpine
    container_name: auth-nginx
    restart: always
    volumes:
      - ./auth_nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./auth_nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      api-auth:
        condition: service_healthy
    networks:
      - auth_network
      - notification_network
    ports:
      - "80:80"
